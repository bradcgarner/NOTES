P O S T G R E S Q L

@@@@@@@@@@@@@@@@

shortcut refresher:
export database from ElephantSql
should be a .lzo file
$ brew install lzop
$ lzop -d <filename> (decompresses .lzo file)
should have a .sql file now

$ createdb -U [role] [database name]
E.g.
$ createdb -U dev test-data
This creates a database called test-data
$ psql [dbname] <[filename]
E.g.
$ psql test-data <aslkflkjs.aslkfjsaldkfjsalkj.sql
This imports a the file from ElephantSql into test-data.

Then start the server
$ pg_ctl start -l $PGDATA/server.log
from -l forward is so that we log outside the terminal

$ psql -U [role]
E.g.
$ psql -U dev
enter postgres shell

#dev
# \c [dbname]
E.g.
# \c test-data
Connect to the test-data database

...now just enter SQL commands...

@@@@@@@@@@@@@@@@

to install:
brew install postgres

to run locally:
make sure $PGDATA is set; this is where pg runs locally
$ echo $PGDATA to find it (usually something like /usr/local/var/postgres)

to save your $PGDATA env var to your bash profile, type:
$ echo "export PGDATA=/usr/local/var/postgres" >> ~/.bash_profile

to start the server type
$ pg_ctl start -l $PGDATA/server.log

(you can skip the part after -l, but then the server will log to the current terminal window, and you'll need to enter commands in a separate window)

(with the server running)...
to create a user, and allow password
$ createuser -Pw --interactive
when it asks username, you can type your owner
  (to find your username)
  $ whoami
or enter a username; if you create a user, say "dev" it stays in the environment, so you don't need to create it again.
say yes to superuser to create an admin

$ pg_ctl stop
$ pg_ctl status
$ pg_ctl start -l [dbname]

to enter terminal command prompt for this database (type SQL)
$ psql -U <role> [dname]

$ createdb [connection-option] [option] [dbname] [description]
$ createdb -U dev [dbname] // option sets the user who runs the command as the owner
$ dropdb [dbname]

$ psql [dbname] < ~/[filename to import]
$ psql -h [hostname] -U [username] [dbname]

back up
$ pg_dump
restore dump file
$ psql

-f is to run file, right???
$ psql -U dev -d [dbname] < ~/[filename]
$ psql -h hostname -u user database < path/to/test.sql

indide psql shell
# select * from users; (write SQL... MUST use ;) (note: lowercase)
quit psql shell
# \q
list all databases
# \l
connect to a database
# \c [dbname]
list public tables with size & description columns
# \dt+
list public tables
# \dt
list all tables in current database
# \d
show detail about a table
# \d [tableName]


mydb=# super=user
mydb  ?
mydb  ? missed slide - go back...

psql -U -dev -d <db> -f query.sql // run <db> as dev, run the file query.sql
@@@@@@@@@@@@@@@@@@@@@@@@@@@@

S Q L

INSERT INTO [table] (field, field, field) VALUES (value, value value);
SELECT * from [table];
SELECT [field, field] FROM [table];
SELECT DISTINCT [field] FROM [table]; // basically value list from field
SELECT [field] FROM [table] WHERE [field] = [value];
SELECT [field] FROM [table] WHERE [field] = [value] AND [field] = [value] ORDER BY [field] [DESC/ASC];
SELECT [field] FROM [table] WHERE [field] = [value] LIMIT 3;
SELECT max([field]) FROM [TABLE]; // max, min, avg
SELECT count(*) FROM [table];
UPDATE [table] SET [field] = [value] WHERE [field] = [value];
DELETE FROM [table] WHERE [field] = [value];
DELETE FROM [table]; // deletes all rows from this table

[id_foreign] integer REFERENCES [table]

SELECT [table.field, ...] FROM [table] INNER JOIN [other table] ON [table.field = table.field] WHERE [table.field] = [value]
SELECT [table.field, ...] FROM [table] LEFT OUTER JOIN [other table] ON [table.field = table.field] WHERE [table.field] = [value]
